<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>诗万首，酒千觞</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-17T03:49:51.468Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>傅鹏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红黑树</title>
    <link href="http://yoursite.com/2018/08/17/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://yoursite.com/2018/08/17/红黑树/</id>
    <published>2018-08-17T03:45:28.000Z</published>
    <updated>2018-08-17T03:49:51.468Z</updated>
    
    <content type="html"><![CDATA[<p>红黑树是具有着色性质的二叉查找树。平均红黑树和评级AVL树一样深，从而查找时间一般接近最优。同时红黑树执行插入操作时，产生的旋转相对较少，性能更优。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li>每一个节点或者是红色，或者是黑色</li><li>根是黑色</li><li>如果一个节点是红色的，那么它的子节点必须是黑色的</li><li>任何一个节点向下遍历到其子孙的叶子节点，所经过的黑节点个数必须相等</li><li>null节点为黑色</li></ol><p><img src="/2018/08/17/红黑树/红黑树.pne" alt="img"></p><h1 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h1><h2 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h2><p><img src="/2018/08/17/红黑树/左旋.gif" alt="img"></p><p><img src="/2018/08/17/红黑树/左旋.png" alt="img"></p><p>左旋做了三件事： </p><ol><li>将y的左子节点赋给x的右子节点,并将x赋给y左子节点的父节点(y左子节点非空时) </li><li>将x的父节点p(非空时)赋给y的父节点，同时更新p的子节点为y(左或右) </li><li>将y的左子节点设为x，将x的父节点设为y </li></ol><h2 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h2><p><img src="/2018/08/17/红黑树/右旋.gif" alt="img"></p><p><img src="/2018/08/17/红黑树/右旋.png" alt="img"></p><p>右旋做了三件事： </p><ol><li>将x的右子节点赋给y的左子节点,并将y赋给x右子节点的父节点(x右子节点非空时) </li><li>将y的父节点p(非空时)赋给x的父节点，同时更新p的子节点为x(左或右) </li><li>将x的右子节点设为y，将y的父节点设为x </li></ol><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p>首先，将红黑树当作一颗二叉查找树，将节点插入；然后，将节点着色为红色，这样就不会违背特性4；最后，通过旋转和重新着色等方法来修正该树，使之重新成为一颗红黑树。</p><p>新插入的节点分为三种情况：</p><ol><li>新插入的节点是根节点，则直接着色为黑色</li><li>新插入的节点的父节点是黑色，则不需要做任何操作，就满足红黑树特性</li><li>新插入的节点的父节点是红色，则需要进行调整，使得结构满足红黑树特性，此时也有三种情况：</li></ol><table><thead><tr><th>1</th><th>当前节点的父节点是红色，并且其叔叔节点也是红色</th><th>1、将父节点设为黑色；2、将叔叔节点设为黑色；3、将爷爷节点设为红色；4、将爷爷节点设为当前节点，继续操作</th></tr></thead><tbody><tr><td>2</td><td>当前节点的父节点是红色，叔叔节点是黑色，且当前节点、父节点、爷爷节点成一字型</td><td>1、父节点设为黑色，爷爷节点设为红色；2、对爷爷节点进行单旋</td></tr><tr><td>3</td><td>当前节点的父节点是红色，叔叔节点是黑色，且当前节点、父节点、爷爷节点成之字型</td><td>1、将当前节点设为黑色，爷爷节点设为红色；2、对爷爷节点进行双旋</td></tr></tbody></table><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除操作会删除对应的节点，如果是叶子节点就直接删除，如果是非叶子节点，会用对应的中序遍历的后继节点来顶替要删除节点的位置。删除后就需要做删除修复操作，使的树符合红黑树的定义，符合定义的红黑树高度是平衡的。</p><p>红黑树的删除操作是最复杂的操作，复杂的地方就在于当删除了黑色节点的时候，如何从兄弟节点去借调节点，以保证树的颜色符合定义。由于红色的兄弟节点是没法借调出黑节点的，这样只能通过选择操作让他上升到父节点，而由于它是红节点，所以它的子节点就是黑的，可以借调。</p><p>对于兄弟节点是黑色节点的可以分成3种情况来处理，当所以的兄弟节点的子节点都是黑色节点时，可以直接将兄弟节点变红，这样局部的红黑树颜色是符合定义的。但是整颗树不一定是符合红黑树定义的，需要往上追溯继续调整。</p><p>对于兄弟节点的子节点为左红右黑或者 (全部为红，右红左黑)这两种情况，可以先将前面的情况通过选择转换为后一种情况，在后一种情况下，因为兄弟节点为黑，兄弟节点的右节点为红，可以借调出两个节点出来做黑节点，这样就可以保证删除了黑节点，整棵树还是符合红黑树的定义的，因为黑色节点的个数没有改变。</p><p>红黑树的删除操作是遇到删除的节点为红色，或者追溯调整到了root节点，这时删除的修复操作完毕。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p><a href="https://github.com/fup1990/EasyRPC/blob/master/nameserver/src/main/java/com/gome/fup/easy/rpc/nameserver/data/NodeTree.java" target="_blank" rel="noopener">https://github.com/fup1990/EasyRPC/blob/master/nameserver/src/main/java/com/gome/fup/easy/rpc/nameserver/data/NodeTree.java</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;红黑树是具有着色性质的二叉查找树。平均红黑树和评级AVL树一样深，从而查找时间一般接近最优。同时红黑树执行插入操作时，产生的旋转相对较少，性能更优。&lt;/p&gt;
&lt;h1 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="红黑树" scheme="http://yoursite.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://yoursite.com/2018/08/17/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2018/08/17/二叉树/</id>
    <published>2018-08-17T03:39:10.000Z</published>
    <updated>2018-08-17T03:44:12.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是一棵树，其中每个节点都不能有多于两个的字节点。</p><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><p>对于树中的每一个节点X，它的左子树中所有项的值小于X中的项，而它的右子树中所有项的值大于X中的项。这意味这该树所有的元素可以用某种一致的方式排序。</p><p><img src="/2018/08/17/二叉树/二叉查找树.png" alt="img"></p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>二分法遍历树中的节点，如果新插入的节点X的key不存在，则插入为叶子节点，如果存在则更新。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>当删除节点X时，需要考虑以下几种情况：</p><ol><li>若X是叶子节点：直接删除；</li><li>若X有一个子节点：则让X的子节点，代替X成为X父节点的子节点；</li><li>若X有两个子节点：让X的右子树的最小的节点Y代替X成为X父节点的子节点，并递归的删除原来的Y节点</li></ol><p><img src="/2018/08/17/二叉树/二叉查找树-删除.png" alt="img"></p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LAQdPfbWl2dOqgk9esX%2F-LI4CvV97j4EBWcH4bQ3%2F-LI47S-QA8Nww_vsRRac%2Fremove2.png?alt=media&amp;token=63bea1d4-3088-4a4f-ae97-8d3a2af26690" alt="img"></p><p>如果删除的次数不频繁，可以使用懒惰删除的策略：当一个节点要被删除时，它仍留在树中，只是被标记删除。</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p><img src="/2018/08/17/二叉树/二叉树遍历.png" alt="img"></p><h2 id="前序排序"><a href="#前序排序" class="headerlink" title="前序排序"></a>前序排序</h2><p>根结点 —&gt; 左子树 —&gt; 右子树</p><p>前序遍历的输出结果：ABDECF</p><h2 id="中序排序"><a href="#中序排序" class="headerlink" title="中序排序"></a>中序排序</h2><p>左子树—&gt; 根结点 —&gt; 右子树</p><p>中序遍历的输出结果：DBEAFC</p><h2 id="后序排序"><a href="#后序排序" class="headerlink" title="后序排序"></a>后序排序</h2><p>左子树 —&gt; 右子树 —&gt; 根结点</p><p>前序遍历的输出结果：DEBFCA</p><h1 id="平衡二叉查找树"><a href="#平衡二叉查找树" class="headerlink" title="平衡二叉查找树"></a>平衡二叉查找树</h1><p>一棵平衡二叉查找树是其每个节点的左子树和右子树的高度最多差1的二叉查找树。</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><h3 id="单旋"><a href="#单旋" class="headerlink" title="单旋"></a>单旋</h3><p>当新插入节点和其父节点、祖父节点成一条直线时，需要执行单旋操作。单旋分为左旋和右旋。</p><p><img src="/2018/08/17/二叉树/单旋.png" alt="img"></p><h3 id="双旋"><a href="#双旋" class="headerlink" title="双旋"></a>双旋</h3><p>当新插入节点和其父节点、祖父节点不在一条直线上，成之子型，需要执行双旋操作。根据新插入节点所处的位置，双旋分为：</p><ol><li>左-右双旋，即先左旋后右旋</li><li>右-左双旋，即先右旋后左旋</li></ol><p><img src="/2018/08/17/二叉树/双旋.png" alt="img"></p><h2 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>AVL树：T</li><li>新插入节点：X</li><li>递归的将X插入到T的相应的子树：t</li><li>t树中高度较高一侧的子节点：c</li></ul><p>插入操作分为几种情况：</p><ol><li>插入X之后，t的左右高度差小于2，则表示此次插入没有破坏T的结构；</li><li>插入X之后，t的左右高度差等于2<ol><li>当c是t的左子节点，且X的值小于c的值时，对t进行右旋；</li><li>当c是t的左子节点，且X的值大于c小于t时，对t进行左-右双旋；</li><li>当c是t的右子节点，且X的值大于c的值时，对t进行左旋；</li><li>当c是t的右子节点，且X的值大于t小于c时，对t进行右-左双旋；</li></ol></li></ol><p><img src="/2018/08/17/二叉树/AVL-插入.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h1&gt;&lt;p&gt;二叉树是一棵树，其中每个节点都不能有多于两个的字节点。&lt;/p&gt;
&lt;h1 id=&quot;二叉查找树&quot;&gt;&lt;a href=&quot;#二叉查找树&quot; cl
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CPU缓存</title>
    <link href="http://yoursite.com/2018/08/16/CPU%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2018/08/16/CPU缓存/</id>
    <published>2018-08-16T10:58:16.000Z</published>
    <updated>2018-08-16T11:16:05.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CPU缓存"><a href="#CPU缓存" class="headerlink" title="CPU缓存"></a>CPU缓存</h1><p>随着CPU的频率不断提升，而内存的访问速度却没有质的突破，为了弥补访问内存的速度慢，充分发挥CPU的计算资源，提高CPU整体吞吐量，在CPU与内存之间引入了一级Cache。 一般来说，一级Cache可以分为一级数据缓存（Data Cache，D-Cache）和一级指令缓存（Instruction Cache，I-Cache）。随着热点数据体积越来越大，一级Cache L1已经不满足发展的要求，引入了二级Cache L2，三级Cache L3。</p><p><img src="/2018/08/16/CPU缓存/CPU缓存.png" alt="img"></p><h1 id="缓存行"><a href="#缓存行" class="headerlink" title="缓存行"></a>缓存行</h1><p>CPU缓存是由很多个缓存行组成的。每个缓存行通常是64字节，并且它有效地引用主内存中的一块儿地址，并拷贝主内存对应地址中的数据。缓存行是CPU与主内存数据交换的最小单位。CPU每次从主存中拉取数据时，会把相邻的数据也存入同一个缓存行。</p><h1 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h1><p><img src="/2018/08/16/CPU缓存/伪共享.png" alt="img"></p><p>数据X、Y、Z被加载到同一Cache Line中，线程A在Core1修改X，线程B在Core2上修改Y。根据MESI大法，假设是Core1是第一个发起操作的CPU核，Core1上的L1 Cache Line由S（共享）状态变成M（修改，脏数据）状态，然后告知其他的CPU核，图例则是Core2，引用同一地址的Cache Line已经无效了；当Core2发起写操作时，首先导致Core1将X写回主存，Cache Line状态由M变为I（无效），而后才是Core2从主存重新读取该地址内容，Cache Line状态由I变成E（独占），最后进行修改Y操作， Cache Line从E变成M。可见多个线程操作在同一Cache Line上的不同数据，相互竞争同一Cache Line，导致线程彼此牵制影响，变成了串行程序，降低了并发性。此时我们则需要将共享在多线程间的数据进行隔离，使他们不在同一个Cache Line上，从而提升多线程的性能。</p><h1 id="解决伪共享方案"><a href="#解决伪共享方案" class="headerlink" title="解决伪共享方案"></a>解决伪共享方案</h1><p><img src="/2018/08/16/CPU缓存/伪共享_方案1.png" alt="img"></p><h2 id="1、填充方式"><a href="#1、填充方式" class="headerlink" title="1、填充方式"></a>1、填充方式</h2><p>正确的方式应该将该对象属性分组，将一起变化的放在一组，与其他属性无关的属性放到一组，将不变的属性放到一组。这样当每次对象变化时，不会带动所有的属性重新加载缓存，提升了读取效率。在JDK1.8以前，我们一般是在属性间增加长整型变量来分隔每一组属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataPadding</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a1,a2,a3,a4,a5,a6,a7,a8;<span class="comment">//防止与前一个对象产生伪共享</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">long</span> modifyTime;</span><br><span class="line">    <span class="keyword">long</span> b1,b2,b3,b4,b5,b6,b7,b8;<span class="comment">//防止不相关变量伪共享;</span></span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="keyword">long</span> c1,c2,c3,c4,c5,c6,c7,c8;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">long</span> createTime;</span><br><span class="line">    <span class="keyword">char</span> key;</span><br><span class="line">    <span class="keyword">long</span> d1,d2,d3,d4,d5,d6,d7,d8;<span class="comment">//防止与下一个对象产生伪共享</span></span><br></pre></td></tr></table></figure><h2 id="2、Contended注解方式"><a href="#2、Contended注解方式" class="headerlink" title="2、Contended注解方式"></a>2、Contended注解方式</h2><p>在JDK1.8中，新增了一种注解@sun.misc.Contended，来使各个变量在Cache line中分隔开。注意，jvm需要添加参数-XX:-RestrictContended才能开启此功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类前加上代表整个类的每个变量都会在单独的cache line中</span></span><br><span class="line"><span class="meta">@sun</span>.misc.Contended</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"restriction"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContendedData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">long</span> modifyTime;</span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="keyword">long</span> createTime;</span><br><span class="line">    <span class="keyword">char</span> key;</span><br><span class="line">&#125;</span><br><span class="line">或者这种：</span><br><span class="line"><span class="comment">// 属性前加上时需要加上组标签</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"restriction"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContendedGroupData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended(<span class="string">"group1"</span>)</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended(<span class="string">"group1"</span>)</span><br><span class="line">    <span class="keyword">long</span> modifyTime;</span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended(<span class="string">"group2"</span>)</span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended(<span class="string">"group3"</span>)</span><br><span class="line">    <span class="keyword">long</span> createTime;</span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended(<span class="string">"group3"</span>)</span><br><span class="line">    <span class="keyword">char</span> key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/08/16/CPU缓存/伪共享_方案2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CPU缓存&quot;&gt;&lt;a href=&quot;#CPU缓存&quot; class=&quot;headerlink&quot; title=&quot;CPU缓存&quot;&gt;&lt;/a&gt;CPU缓存&lt;/h1&gt;&lt;p&gt;随着CPU的频率不断提升，而内存的访问速度却没有质的突破，为了弥补访问内存的速度慢，充分发挥CPU的计算资源，提高C
      
    
    </summary>
    
      <category term="操作系统原理" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="操作系统原理" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
    
      <category term="性能" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>AQS</title>
    <link href="http://yoursite.com/2018/08/16/AQS/"/>
    <id>http://yoursite.com/2018/08/16/AQS/</id>
    <published>2018-08-16T10:21:03.000Z</published>
    <updated>2018-08-16T11:14:36.130Z</updated>
    
    <content type="html"><![CDATA[<p>AQS是AbstractQueuedSynchronizer类的简称，即队列同步器。它是构建锁或者其他同步组件的基础框架。</p><p>AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）。</p><p>AQS 使用一个 volatile int 类型的成员变量 state 来表示同步状态：</p><ul><li>当 state &gt; 0 时，表示已经获取了锁。</li><li>当 state = 0 时，表示释放了锁。</li></ul><p>AQS 通过内置的 FIFO 同步队列来完成资源获取线程的排队工作。如果当前线程获取同步状态失败（锁）时，AQS 则会将当前线程以及等待状态等信息构造成一个节点（Node）并将其加入同步队列，同时会阻塞当前线程 当同步状态释放时，则会把节点中的线程唤醒，使其再次尝试获取同步状态。</p><p><img src="/2018/08/16/AQS/CLH.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AQS是AbstractQueuedSynchronizer类的简称，即队列同步器。它是构建锁或者其他同步组件的基础框架。&lt;/p&gt;
&lt;p&gt;AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同
      
    
    </summary>
    
      <category term="并发" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://yoursite.com/2018/08/16/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2018/08/16/线程池/</id>
    <published>2018-08-16T10:17:09.000Z</published>
    <updated>2018-08-16T10:19:44.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h1><p>Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</p><h1 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h1><p>ExecutorService是Executor直接的扩展接口，也是最常用的线程池接口，我们通常见到的线程池定时任务线程池都是它的实现类。</p><p><img src="/2018/08/16/线程池/继承关系.png" alt="img"></p><h1 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h1><p>java的线程池支持主要通过ThreadPoolExecutor来实现，我们使用的ExecutorService的各种线程池策略都是基于ThreadPoolExecutor实现的，所以ThreadPoolExecutor十分重要。要弄明白各种线程池策略，必须先弄明白ThreadPoolExecutor。</p><h2 id="构造参数说明"><a href="#构造参数说明" class="headerlink" title="构造参数说明"></a>构造参数说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                          int maximumPoolSize,</span><br><span class="line">                          long keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          ThreadFactory threadFactory,</span><br><span class="line">                          RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>corePoolSize：核心线程数，如果运行的线程少于corePoolSize，则创建新线程来执行新任务，即使线程池中的其他线程是空闲的。</p></li><li><p>maximumPoolSize：最大线程数，可允许创建的线程数。</p></li><li><p>keepAliveTime：如果线程数多于corePoolSize,则这些多余的线程的空闲时间超过keepAliveTime时将被终止。</p></li><li><p>unit：keepAliveTime参数的时间单位。</p></li><li><p>workQueue：保存任务的阻塞队列。                                                                                                                当运行的线程数少于corePoolSize时，在有新任务时直接创建新线程来执行任务而无需再进队列 ；</p><p>当运行的线程数等于或多于corePoolSize，在有新任务添加时则选加入队列，不直接创建线程 ；</p><p>当队列满时，在有新任务时就创建新线程。</p></li><li><p>threadFactory：使用ThreadFactory创建新线程，默认使用defaultThreadFactory创建线程。</p></li><li><p>handler： 定义处理被拒绝任务的策略，默认使用 ThreadPoolExecutor.AbortPolicy， 抛出RejectExecutorException。</p></li></ul><h2 id="执行任务流程"><a href="#执行任务流程" class="headerlink" title="执行任务流程"></a>执行任务流程</h2><p><img src="/2018/08/16/线程池/流程.png" alt="img"></p><h2 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h2><ul><li>ThreadPoolExecutor.AbortPolicy：默认策略，抛出RejectExecutorException。</li><li>ThreadPoolExecutor.CallerRunsPolicy：改为本地线程同步执行任务。</li><li>ThreadPoolExecutor.DiscardPolicy：丢弃任务。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：从阻塞队列中取出队首的任务丢弃，然后推入队列。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>RUNNING：初始状态，接受新任务并且处理已经在队列中的任务。</li><li>SHUTDOWN：不接受新任务，但处理队列中的任务。</li><li>STOP：不接受新任务，不处理排队的任务，并中断正在进行的任务。</li><li>TIDYING：所有任务已终止，workerCount为零，线程转换到状态TIDYING，这时回调terminate()方法。</li><li>TERMINATED：终态，terminated()执行完成。</li></ul><p>shutdown()：平缓的关闭。不再接受新的任务，同事等待已经提交的任务执行完成，包括未执行的任务。</p><p>shutdownNow()：暴力的关闭。取消所有运行中的任务，并且不再执行队列中尚未执行的任务。</p><h1 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h1><p>Executors提供了一系列静态工厂方法用于创建各种线程池。</p><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><p>创建一个固定长度的线程池，每当提交一次任务时就创建一个线程，直到达到线程池的最大数量，这时线程池的规模将不再变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123; </span><br><span class="line">        return new ThreadPoolExecutor(nThreads, </span><br><span class="line">                                      nThreads, </span><br><span class="line">                                      0L,</span><br><span class="line">                                      TimeUnit.MILLISECONDS, </span><br><span class="line">                                      new LinkedBlockingQueue&lt;Runnable&gt;()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> corePoolSize与 maximumPoolSize数量相等，表示线程池将维护固定数量的线程。使用了无界的 LinkedBlockingQueue队列，所以可以一直添加新任务到线程池，不会触发拒绝机制。</p><h2 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h2><p>创建一个可换成的线程池，如果线程池的当前规模超过了需要处理的任务数量时，那么将回收空闲的线程；而当 需要处理的任务数量增加时，则添加新的线程。线程池的规模不存在任何限制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class="line">        return new ThreadPoolExecutor(0, </span><br><span class="line">                                      Integer.MAX_VALUE,</span><br><span class="line">                                      60L, </span><br><span class="line">                                      TimeUnit.SECONDS,</span><br><span class="line">                                      new SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> corePoolSize为0， maximumPoolSize为 Integer.MAX_VALUE表示线程池容量为无限。闲置60秒的线程将被回收。 SynchronousQueue是一个阻塞的同步队列， 队列只能存储一个元素。因此，线程池会不断创建新的线程，极端场景下会因为线程数量过多而耗尽计算机资源。</p><h2 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h2><p>一个单线程的Executor，创建单个工作线程来执行任务；如果线程异常，则创建另一个线程来替代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class="line">        return new FinalizableDelegatedExecutorService</span><br><span class="line">            (new ThreadPoolExecutor(1, </span><br><span class="line">                                    1,</span><br><span class="line">                                    0L, </span><br><span class="line">                                    TimeUnit.MILLISECONDS,</span><br><span class="line">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h2><p>创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class="line">        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,</span><br><span class="line">              new DelayedWorkQueue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><p>ScheduledExecutorService一种安排任务执行的ExecutorService，任务可以延迟执行，或者在一个固定的时间间隔内重复执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//创建定时器线程池</span><br><span class="line">ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);</span><br></pre></td></tr></table></figure><table><thead><tr><th>常用方法</th><th>方法说明</th><th>重要参数说明</th></tr></thead><tbody><tr><td>schedule(Runnable command, long delay, TimeUnit unit)</td><td>延后指定时间执行任务</td><td>delay:延后指定时间执行任务</td></tr><tr><td>scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</td><td>周期的执行任务，一次只能执行一个任务，当前一个任务没有执行完，而周期时间到了，则下一个任务等待前一个任务执行完毕之后立即执行</td><td>initialDelay:延后指定时间执行任务；period:定期执行</td></tr><tr><td>scheduleWithFixedDelay(Runnable command, long initialDelay, long period, TimeUnit unit)</td><td>周期的执行任务，当前一个任务执行完毕后，开始计时</td><td>initialDelay:延后指定时间执行任务；period:定期执行</td></tr></tbody></table><h1 id="设置线程池的大小"><a href="#设置线程池的大小" class="headerlink" title="设置线程池的大小"></a>设置线程池的大小</h1><p>设置线程池的大小时，应避免过大或过小这两种极端情况。如果线程池过大，那么大量的线程将在相对很少的CPU和内存资源上发生竞争，降低系统性能，耗费服务器资源。如果线程池过小，那么将导致许多空闲的处理器无法执行工作，浪费资源。要想正确的设置线程池的大小，需要分析计算㕂、资源预算和任务特性。</p><h2 id="对于计算密集型任务"><a href="#对于计算密集型任务" class="headerlink" title="对于计算密集型任务"></a>对于计算密集型任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = 线程数量</span><br><span class="line">C = CPU数量</span><br><span class="line">N = C + 1</span><br></pre></td></tr></table></figure><h2 id="对于IO密集型任务"><a href="#对于IO密集型任务" class="headerlink" title="对于IO密集型任务"></a>对于IO密集型任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">N = 线程数量</span><br><span class="line">C = CPU数量</span><br><span class="line">P = CPU利用率</span><br><span class="line">CT = 计算时间</span><br><span class="line">WT = IO等待时间</span><br><span class="line">N = C * P * (1 + CT/WT)</span><br></pre></td></tr></table></figure><p>当然，CPU周期并不是唯一影响线程池大小饿资源，还包括内存、文件句柄、套接字句柄和数据库连接等。计算这些资源对线程池的约束条件是更容易的：计算每个任务对该资源的需求量，然后用该资源的可用总量除以每个任务的需求量，所得结果就是线程池大小的上线。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Executor&quot;&gt;&lt;a href=&quot;#Executor&quot; class=&quot;headerlink&quot; title=&quot;Executor&quot;&gt;&lt;/a&gt;Executor&lt;/h1&gt;&lt;p&gt;Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种
      
    
    </summary>
    
      <category term="并发" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="http://yoursite.com/2018/08/16/HashMap/"/>
    <id>http://yoursite.com/2018/08/16/HashMap/</id>
    <published>2018-08-16T10:03:06.000Z</published>
    <updated>2018-08-16T10:16:07.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>HashMap 是一个关联数组、哈希表，它是线程不安全的，允许key为null,value为null。遍历时无序。  其底层数据结构是数组称之为哈希桶，每个桶里面放的是链表，链表中的每个节点，就是哈希表中的每个元素。  在JDK8中，当链表长度达到8，会转化成红黑树，以提升它的查询、插入效率，它实现了Map&lt;K,V&gt;, Cloneable, Serializable接口。</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p><img src="/2018/08/16/HashMap/hashmap.png" alt="img"></p><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大容量 2的30次方</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//默认的加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希桶，存放链表。 长度是2的N次方，或者初始化时为0.</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载因子，用于计算哈希表元素数量的阈值。  threshold = 哈希桶.length * loadFactor;</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"><span class="comment">//哈希表内元素数量的阈值，当哈希表内元素数量超过阈值时，会发生扩容resize()。</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//默认构造函数，赋值加载因子为默认的0.75f</span></span><br><span class="line"><span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line"><span class="comment">//指定初始化容量的构造函数</span></span><br><span class="line"><span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同时指定初始化容量 以及 加载因子， 用的很少，一般不会修改loadFactor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line"><span class="comment">//边界处理</span></span><br><span class="line"><span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">   initialCapacity);</span><br><span class="line"><span class="comment">//初始容量最大不能超过2的30次方</span></span><br><span class="line"><span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line"><span class="comment">//显然加载因子不能为负数</span></span><br><span class="line"><span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">   loadFactor);</span><br><span class="line"><span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line"><span class="comment">//设置阈值为  》=初始化容量的 2的n次方的值</span></span><br><span class="line"><span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新建一个哈希表，同时将另一个map m 里的所有元素加入表中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据期望容量cap，返回2的n次方形式的 哈希桶的实际容量 length。 返回值一般会&gt;=cap </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line"><span class="comment">//经过下面的 或 和位移 运算， n最终各位都是1。</span></span><br><span class="line"><span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line"><span class="comment">//判断n是否越界，返回 2的n次方作为 table（哈希桶）的阈值</span></span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将另一个Map的所有元素加入表中，参数evict初始化时为false，其他情况为true</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line"><span class="comment">//拿到m的元素数量</span></span><br><span class="line"><span class="keyword">int</span> s = m.size();</span><br><span class="line"><span class="comment">//如果数量大于0</span></span><br><span class="line"><span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//如果当前表是空的</span></span><br><span class="line"><span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line"><span class="comment">//根据m的元素数量和当前表的加载因子，计算出阈值</span></span><br><span class="line"><span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line"><span class="comment">//修正阈值的边界 不能超过MAXIMUM_CAPACITY</span></span><br><span class="line"><span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line"> (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line"><span class="comment">//如果新的阈值大于当前阈值</span></span><br><span class="line"><span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line"><span class="comment">//返回一个 》=新的阈值的 满足2的n次方的阈值</span></span><br><span class="line">threshold = tableSizeFor(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果当前元素表不是空的，但是 m的元素数量大于阈值，说明一定要扩容。</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">resize();</span><br><span class="line"><span class="comment">//遍历 m 依次将元素加入当前表中。</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">K key = e.getKey();</span><br><span class="line">V value = e.getValue();</span><br><span class="line">putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Node-lt-K-V-gt"><a href="#Node-lt-K-V-gt" class="headerlink" title="Node&lt;K,V&gt;"></a>Node&lt;K,V&gt;</h1><p> Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h1><p>当HashMap的容量达到threshold域值时，就会触发扩容。扩容前后，哈希桶的长度一定会是2的次方。扩容操作时，会new一个新的Node数组作为哈希桶，然后将原哈希表中的所有数据(Node节点)移动到新的哈希桶中，相当于对原哈希表中所有的数据重新做了一个put操作。所以性能消耗很大，可想而知，在哈希表的容量越大时，性能消耗越明显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line"><span class="comment">//oldTab 为当前表的哈希桶</span></span><br><span class="line">Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line"><span class="comment">//当前哈希桶的容量 length</span></span><br><span class="line"><span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line"><span class="comment">//当前的阈值</span></span><br><span class="line"><span class="keyword">int</span> oldThr = threshold;</span><br><span class="line"><span class="comment">//初始化新的容量和阈值为0</span></span><br><span class="line"><span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果当前容量大于0</span></span><br><span class="line"><span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//如果当前容量已经到达上限</span></span><br><span class="line"><span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line"><span class="comment">//则设置阈值是2的31次方-1</span></span><br><span class="line">threshold = Integer.MAX_VALUE;</span><br><span class="line"><span class="comment">//同时返回当前的哈希桶，不再扩容</span></span><br><span class="line"><span class="keyword">return</span> oldTab;</span><br><span class="line">&#125;<span class="comment">//否则新的容量为旧的容量的两倍。 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line"> oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<span class="comment">//如果旧的容量大于等于默认初始容量16</span></span><br><span class="line"><span class="comment">//那么新的阈值也等于旧的阈值的两倍</span></span><br><span class="line">newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">&#125;<span class="comment">//如果当前表是空的，但是有阈值。代表是初始化时指定了容量、阈值的情况</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">newCap = oldThr;<span class="comment">//那么新表的容量就等于旧的阈值</span></span><br><span class="line"><span class="keyword">else</span> &#123;&#125;<span class="comment">//如果当前表是空的，而且也没有阈值。代表是初始化时没有任何容量/阈值参数的情况               // zero initial threshold signifies using defaults</span></span><br><span class="line">newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//此时新表的容量为默认的容量 16</span></span><br><span class="line"> <span class="comment">//新的阈值为默认容量16 * 默认加载因子0.75f = 12</span></span><br><span class="line">newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;<span class="comment">//如果新的阈值是0，对应的是  当前表是空的，但是有阈值的情况</span></span><br><span class="line"><span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;<span class="comment">//根据新表容量 和 加载因子 求出新的阈值</span></span><br><span class="line"><span class="comment">//进行越界修复</span></span><br><span class="line">newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新阈值 </span></span><br><span class="line">threshold = newThr;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line"><span class="comment">//根据新的容量 构建新的哈希桶</span></span><br><span class="line">Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line"><span class="comment">//更新哈希桶引用</span></span><br><span class="line">table = newTab;</span><br><span class="line"><span class="comment">//如果以前的哈希桶中有元素</span></span><br><span class="line"><span class="comment">//下面开始将当前哈希桶中的所有节点转移到新的哈希桶中</span></span><br><span class="line"><span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//遍历老的哈希桶</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line"><span class="comment">//取出当前的节点 e</span></span><br><span class="line">Node&lt;K,V&gt; e;</span><br><span class="line"><span class="comment">//如果当前桶中有元素,则将链表赋值给e</span></span><br><span class="line"><span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//将原哈希桶置空以便GC</span></span><br><span class="line">oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//如果当前链表中就一个元素，（没有发生哈希碰撞）</span></span><br><span class="line"><span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">//直接将这个元素放置在新的哈希桶里。</span></span><br><span class="line"><span class="comment">//注意这里取下标 是用 哈希值 与 桶的长度-1 。 </span></span><br><span class="line"><span class="comment">//由于桶的长度是2的n次方，这么做其实是等于 一个模运算。但是效率更高</span></span><br><span class="line">newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line"><span class="comment">//如果发生过哈希碰撞 ,而且是节点数超过8个，转化成了红黑树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line"><span class="comment">//如果发生过哈希碰撞，节点数小于8个。</span></span><br><span class="line"><span class="comment">//则要根据链表上每个节点的哈希值，依次放入新哈希桶对应下标位置。</span></span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line"><span class="comment">//因为扩容是容量翻倍，所以原链表上的每个节点。</span></span><br><span class="line"><span class="comment">//现在可能存放在原来的下标，即low位， 或者扩容后的下标，即high位。 </span></span><br><span class="line"><span class="comment">//high位=  low位+原哈希桶容量</span></span><br><span class="line"><span class="comment">//低位链表的头结点、尾节点</span></span><br><span class="line">Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//高位链表的头节点、尾节点</span></span><br><span class="line">Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">Node&lt;K,V&gt; next;<span class="comment">//临时节点 存放e的下一个节点</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">next = e.next;</span><br><span class="line"><span class="comment">//这里又是一个利用位运算 代替常规运算的高效点： </span></span><br><span class="line"><span class="comment">//利用哈希值 与 旧的容量，可以得到哈希值去模后，</span></span><br><span class="line"><span class="comment">//是大于等于oldCap还是小于oldCap，等于0代表小于oldCap，应该存放在低位，</span></span><br><span class="line"><span class="comment">//否则存放在高位</span></span><br><span class="line"><span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//给头尾节点指针赋值</span></span><br><span class="line"><span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">loHead = e;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">loTail.next = e;</span><br><span class="line">loTail = e;</span><br><span class="line">&#125;<span class="comment">//高位也是相同的逻辑</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">hiHead = e;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">hiTail.next = e;</span><br><span class="line">hiTail = e;</span><br><span class="line">&#125;<span class="comment">//循环直到链表结束</span></span><br><span class="line">&#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//将低位链表存放在原index处，</span></span><br><span class="line"><span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">loTail.next = <span class="keyword">null</span>;</span><br><span class="line">newTab[j] = loHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将高位链表存放在新index处</span></span><br><span class="line"><span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">newTab[j + oldCap] = hiHead;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="putValue"><a href="#putValue" class="headerlink" title="putValue"></a>putValue</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line"><span class="comment">//tab存放 当前的哈希桶， p用作临时链表节点  </span></span><br><span class="line">Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line"><span class="comment">//如果当前哈希表是空的，代表是初始化</span></span><br><span class="line"><span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line"><span class="comment">//那么直接去扩容哈希表，并且将扩容后的哈希桶长度赋值给n</span></span><br><span class="line">n = (tab = resize()).length;</span><br><span class="line"><span class="comment">//如果当前index的节点是空的，表示没有发生哈希碰撞。 直接构建一个新节点Node，挂载在index处即可。</span></span><br><span class="line"><span class="comment">//这里再啰嗦一下，index 是利用 哈希值 &amp; 哈希桶的长度-1，替代模运算</span></span><br><span class="line"><span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//否则 发生了哈希冲突。</span></span><br><span class="line">Node&lt;K,V&gt; e; K k;</span><br><span class="line"><span class="comment">//如果哈希值相等，key也相等，则是覆盖value操作</span></span><br><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">e = p;<span class="comment">//将当前节点引用赋值给e</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//红黑树</span></span><br><span class="line">e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//不是覆盖操作，则插入一个普通链表节点</span></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line"><span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;<span class="comment">//遍历到尾部，追加新节点到尾部</span></span><br><span class="line">p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//如果追加节点后，链表数量&gt;=8，则转化为红黑树</span></span><br><span class="line"><span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">treeifyBin(tab, hash);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果找到了要覆盖的节点</span></span><br><span class="line"><span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">p = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果e不是null，说明有需要覆盖的节点，</span></span><br><span class="line"><span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line"><span class="comment">//则覆盖节点值，并返回原oldValue</span></span><br><span class="line">V oldValue = e.value;</span><br><span class="line"><span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">e.value = value;</span><br><span class="line"><span class="comment">//这是一个空实现的函数，用作LinkedHashMap重写使用。</span></span><br><span class="line">afterNodeAccess(e);</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果执行到了这里，说明插入了一个新的节点，所以会修改modCount，以及返回null。</span></span><br><span class="line"><span class="comment">//修改modCount</span></span><br><span class="line">++modCount;</span><br><span class="line"><span class="comment">//更新size，并判断是否需要扩容。</span></span><br><span class="line"><span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">resize();</span><br><span class="line"><span class="comment">//这是一个空实现的函数，用作LinkedHashMap重写使用。</span></span><br><span class="line">afterNodeInsertion(evict);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/08/16/HashMap/put.png" alt="img"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。</li><li>负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。</li><li>HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。</li><li>红黑树大程度优化了HashMap的性能。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;HashMap 是一个关联数组、哈希表，它是线程不安全的，允许key为null,value为null。遍历时无序。  其底层数据结构是数组称
      
    
    </summary>
    
      <category term="源码" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
</feed>
