<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有志者</title>
  
  <subtitle>个人工作学习的记录博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-16T09:32:12.908Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>傅鹏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AQS</title>
    <link href="http://yoursite.com/2018/08/16/AQS/"/>
    <id>http://yoursite.com/2018/08/16/AQS/</id>
    <published>2018-08-16T09:32:10.373Z</published>
    <updated>2018-08-16T09:32:12.908Z</updated>
    
    <content type="html"><![CDATA[<p>AQS是AbstractQueuedSynchronizer类的简称，即队列同步器。它是构建锁或者其他同步组件的基础框架。</p><p>AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）。</p><p>AQS 使用一个 volatile int 类型的成员变量 state 来表示同步状态：</p><ul><li>当 state &gt; 0 时，表示已经获取了锁。</li><li>当 state = 0 时，表示释放了锁。</li></ul><p>AQS 通过内置的 FIFO 同步队列来完成资源获取线程的排队工作。如果当前线程获取同步状态失败（锁）时，AQS 则会将当前线程以及等待状态等信息构造成一个节点（Node）并将其加入同步队列，同时会阻塞当前线程 当同步状态释放时，则会把节点中的线程唤醒，使其再次尝试获取同步状态。</p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LAQdPfbWl2dOqgk9esX%2F-LJNakHF-xV5A9bd-L9E%2F-LJNazOjNAY3t4vEiteA%2Faqs.png?alt=media&amp;token=601b3fc8-afeb-465e-96f5-636e420db806" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AQS是AbstractQueuedSynchronizer类的简称，即队列同步器。它是构建锁或者其他同步组件的基础框架。&lt;/p&gt;
&lt;p&gt;AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同
      
    
    </summary>
    
      <category term="并发" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="AQS" scheme="http://yoursite.com/tags/AQS/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://yoursite.com/2018/08/16/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2018/08/16/线程池/</id>
    <published>2018-08-16T06:48:16.686Z</published>
    <updated>2018-08-16T09:25:31.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h1><p>Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</p><h1 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h1><p>ExecutorService是Executor直接的扩展接口，也是最常用的线程池接口，我们通常见到的线程池定时任务线程池都是它的实现类。</p><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LAQdPfbWl2dOqgk9esX%2F-LAg4sZ0GzpDgPXORtaz%2F-LAg5IZx4sfg_Nl7N8wZ%2Fexecutor.jpg?alt=media&amp;token=99cc6bae-da88-4a87-a75d-fc275c22d6a2" alt="img"></p><h1 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h1><p>java的线程池支持主要通过ThreadPoolExecutor来实现，我们使用的ExecutorService的各种线程池策略都是基于ThreadPoolExecutor实现的，所以ThreadPoolExecutor十分重要。要弄明白各种线程池策略，必须先弄明白ThreadPoolExecutor。</p><h2 id="构造参数说明"><a href="#构造参数说明" class="headerlink" title="构造参数说明"></a>构造参数说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                          int maximumPoolSize,</span><br><span class="line">                          long keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          ThreadFactory threadFactory,</span><br><span class="line">                          RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>corePoolSize：核心线程数，如果运行的线程少于corePoolSize，则创建新线程来执行新任务，即使线程池中的其他线程是空闲的。</p></li><li><p>maximumPoolSize：最大线程数，可允许创建的线程数。</p></li><li><p>keepAliveTime：如果线程数多于corePoolSize,则这些多余的线程的空闲时间超过keepAliveTime时将被终止。</p></li><li><p>unit：keepAliveTime参数的时间单位。</p></li><li><p>workQueue：保存任务的阻塞队列。                                                                                                                当运行的线程数少于corePoolSize时，在有新任务时直接创建新线程来执行任务而无需再进队列 ；</p><p>当运行的线程数等于或多于corePoolSize，在有新任务添加时则选加入队列，不直接创建线程 ；</p><p>当队列满时，在有新任务时就创建新线程。</p></li><li><p>threadFactory：使用ThreadFactory创建新线程，默认使用defaultThreadFactory创建线程。</p></li><li><p>handler： 定义处理被拒绝任务的策略，默认使用 ThreadPoolExecutor.AbortPolicy， 抛出RejectExecutorException。</p></li></ul><h2 id="执行任务流程"><a href="#执行任务流程" class="headerlink" title="执行任务流程"></a>执行任务流程</h2><p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LAQdPfbWl2dOqgk9esX%2F-LAg4sZ0GzpDgPXORtaz%2F-LAg5TOb1WZoFzPuYsMC%2Fliucheng.jpg?alt=media&amp;token=c8a8a94a-7260-4c43-a8fd-5e2ffbd29753" alt="img"></p><h2 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h2><ul><li>ThreadPoolExecutor.AbortPolicy：默认策略，抛出RejectExecutorException。</li><li>ThreadPoolExecutor.CallerRunsPolicy：改为本地线程同步执行任务。</li><li>ThreadPoolExecutor.DiscardPolicy：丢弃任务。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：从阻塞队列中取出队首的任务丢弃，然后推入队列。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>RUNNING：初始状态，接受新任务并且处理已经在队列中的任务。</li><li>SHUTDOWN：不接受新任务，但处理队列中的任务。</li><li>STOP：不接受新任务，不处理排队的任务，并中断正在进行的任务。</li><li>TIDYING：所有任务已终止，workerCount为零，线程转换到状态TIDYING，这时回调terminate()方法。</li><li>TERMINATED：终态，terminated()执行完成。</li></ul><p>shutdown()：平缓的关闭。不再接受新的任务，同事等待已经提交的任务执行完成，包括未执行的任务。</p><p>shutdownNow()：暴力的关闭。取消所有运行中的任务，并且不再执行队列中尚未执行的任务。</p><h1 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h1><p>Executors提供了一系列静态工厂方法用于创建各种线程池。</p><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><p>创建一个固定长度的线程池，每当提交一次任务时就创建一个线程，直到达到线程池的最大数量，这时线程池的规模将不再变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123; </span><br><span class="line">        return new ThreadPoolExecutor(nThreads, </span><br><span class="line">                                      nThreads, </span><br><span class="line">                                      0L,</span><br><span class="line">                                      TimeUnit.MILLISECONDS, </span><br><span class="line">                                      new LinkedBlockingQueue&lt;Runnable&gt;()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> corePoolSize与 maximumPoolSize数量相等，表示线程池将维护固定数量的线程。使用了无界的 LinkedBlockingQueue队列，所以可以一直添加新任务到线程池，不会触发拒绝机制。</p><h2 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h2><p>创建一个可换成的线程池，如果线程池的当前规模超过了需要处理的任务数量时，那么将回收空闲的线程；而当 需要处理的任务数量增加时，则添加新的线程。线程池的规模不存在任何限制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class="line">        return new ThreadPoolExecutor(0, </span><br><span class="line">                                      Integer.MAX_VALUE,</span><br><span class="line">                                      60L, </span><br><span class="line">                                      TimeUnit.SECONDS,</span><br><span class="line">                                      new SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> corePoolSize为0， maximumPoolSize为 Integer.MAX_VALUE表示线程池容量为无限。闲置60秒的线程将被回收。 SynchronousQueue是一个阻塞的同步队列， 队列只能存储一个元素。因此，线程池会不断创建新的线程，极端场景下会因为线程数量过多而耗尽计算机资源。</p><h2 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h2><p>一个单线程的Executor，创建单个工作线程来执行任务；如果线程异常，则创建另一个线程来替代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class="line">        return new FinalizableDelegatedExecutorService</span><br><span class="line">            (new ThreadPoolExecutor(1, </span><br><span class="line">                                    1,</span><br><span class="line">                                    0L, </span><br><span class="line">                                    TimeUnit.MILLISECONDS,</span><br><span class="line">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h2><p>创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class="line">        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,</span><br><span class="line">              new DelayedWorkQueue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><p>ScheduledExecutorService一种安排任务执行的ExecutorService，任务可以延迟执行，或者在一个固定的时间间隔内重复执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//创建定时器线程池</span><br><span class="line">ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);</span><br></pre></td></tr></table></figure><table><thead><tr><th>常用方法</th><th>方法说明</th><th>重要参数说明</th></tr></thead><tbody><tr><td>schedule(Runnable command, long delay, TimeUnit unit)</td><td>延后指定时间执行任务</td><td>delay:延后指定时间执行任务</td></tr><tr><td>scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</td><td>周期的执行任务，一次只能执行一个任务，当前一个任务没有执行完，而周期时间到了，则下一个任务等待前一个任务执行完毕之后立即执行</td><td>initialDelay:延后指定时间执行任务；period:定期执行</td></tr><tr><td>scheduleWithFixedDelay(Runnable command, long initialDelay, long period, TimeUnit unit)</td><td>周期的执行任务，当前一个任务执行完毕后，开始计时</td><td>initialDelay:延后指定时间执行任务；period:定期执行</td></tr></tbody></table><h1 id="设置线程池的大小"><a href="#设置线程池的大小" class="headerlink" title="设置线程池的大小"></a>设置线程池的大小</h1><p>设置线程池的大小时，应避免过大或过小这两种极端情况。如果线程池过大，那么大量的线程将在相对很少的CPU和内存资源上发生竞争，降低系统性能，耗费服务器资源。如果线程池过小，那么将导致许多空闲的处理器无法执行工作，浪费资源。要想正确的设置线程池的大小，需要分析计算㕂、资源预算和任务特性。</p><h2 id="对于计算密集型任务"><a href="#对于计算密集型任务" class="headerlink" title="对于计算密集型任务"></a>对于计算密集型任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = 线程数量</span><br><span class="line">C = CPU数量</span><br><span class="line">N = C + 1</span><br></pre></td></tr></table></figure><h2 id="对于IO密集型任务"><a href="#对于IO密集型任务" class="headerlink" title="对于IO密集型任务"></a>对于IO密集型任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">N = 线程数量</span><br><span class="line">C = CPU数量</span><br><span class="line">P = CPU利用率</span><br><span class="line">CT = 计算时间</span><br><span class="line">WT = IO等待时间</span><br><span class="line">N = C * P * (1 + CT/WT)</span><br></pre></td></tr></table></figure><p>当然，CPU周期并不是唯一影响线程池大小饿资源，还包括内存、文件句柄、套接字句柄和数据库连接等。计算这些资源对线程池的约束条件是更容易的：计算每个任务对该资源的需求量，然后用该资源的可用总量除以每个任务的需求量，所得结果就是线程池大小的上线。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Executor&quot;&gt;&lt;a href=&quot;#Executor&quot; class=&quot;headerlink&quot; title=&quot;Executor&quot;&gt;&lt;/a&gt;Executor&lt;/h1&gt;&lt;p&gt;Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种
      
    
    </summary>
    
      <category term="并发" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
</feed>
